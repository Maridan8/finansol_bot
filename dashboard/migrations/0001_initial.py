# Generated by Django 4.2.4 on 2023-09-13 20:05

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


def seed_data(apps, schema_editor):
    # Get the model
    Model_1 = apps.get_model("dashboard", "ClientConfig")

    # Create instances of the model
    Model_1.objects.create(to_address="thomasmiller108120@gmail.com")

    Model_2 = apps.get_model("dashboard", "IntentConfig")
    Model_2.objects.create(
        intent_name="qui",
        response="Merci pour votre clic! Mon nom est Chatbot, Charly Chatbot ! Je voudrais bien devenir votre assistant conversationnel, aid√© par mon intelligence artificielle, Je r√©pondrai √† vos questions, comme ci-dessous, et plus tard aux questions de vos contacts en ligne (maximum 8 questions FAQ).",
    )
    Model_2.objects.create(
        intent_name="contacts",
        response="Je serai bien visible sur votre page d‚Äôaccueil, ou sur toutes vos pages, et d√®s que votre contact clique sur moi, je lui r√©pondrai aux questions que vous aurez pr√©par√©, et avec les informations que je trouverai dans votre site internet.",
    )
    Model_2.objects.create(
        intent_name="assistant",
        response="Je serai pr√©sent H24, 7 jours sur 7, tous les jours de l‚Äôann√©e. Un simple clic me mettra en action. J‚Äôassisterai jusqu'√† 5 contacts simultan√©ment, en temps r√©el. Ainsi, tous vos contacts auront les r√©ponses √† leurs questions.",
    )
    Model_2.objects.create(
        intent_name="clique",
        response="Selon les questions les plus √©videntes (max 8) que vous aurez pr√©par√©, je recherche dans les informations de votre site, et je pr√©senterai √† chaque contact le ou les produits ou services qui l‚Äôint√©ressent avec prix et d√©lais. Tout cela ne prendra que quelques millisecondes, sans risque donc que le client se lasse et s‚Äôen va. Je pourrai lui fixer un rendez-vous de visite selon votre calendrier.",
    )
    Model_2.objects.create(
        intent_name="advantage",
        response="Vous ne perdrez plus aucun contact. Apr√®s mon dialogue avec vos contacts je ferai une synth√®se (option) et une fiche avec le nom, adresse email, t√©l√©phone, budget, type de produit/service recherch√© et que je vous transmettrai. Les rendez-vous seront pris dans ma conversation avec votre contact. Vous pourrez donc vous concentrer sur votre activit√© principale, mais sans perte de contacts par absence ou occupation.",
    )
    Model_2.objects.create(
        intent_name="co√ªte",
        response="Durant mon lancement je serai en promotion (20 premiers contrats). Pendant cette p√©riode mon prix de base, c√†d chatbot avec votre avatar et jusqu‚Äô√† 8 questions maximum, mon prix est de 2.70 euro,  installation et mise en service comprises. Si vous optez pour le dashboard et les statistiques, cela co√ªtera 1.25 Euro. Au total ce seront 4.05 Euro, ou l‚Äô√©quivalent d‚Äôenviron 2 mois de salaire d‚Äôun assistant humain. Les conditions de paiement seront: 50% √† la commande, le solde √† l‚Äôinstallation. Pour le lancement il y aura 10% de remise pour les 10 premi√®res commandes, et 5% de remise pour les commandes de 11 √† 20 (date et num√©ro de commande feront foi).  Pour ce prix unique,  je serai pr√©sent tous les jours de chaque ann√©e, et je r√©pondrai √† tous vos contacts. Il viendra en plus des frais mensuels de 15 Euro  pour l‚Äôh√©bergement, l‚Äôentretien, les petites r√©parations √©ventuelles. Vous serez donc gagnant apr√®s seulement 2 mois, apr√®s ce sera tout b√©nef!",
    )
    Model_2.objects.create(
        intent_name="random",
        response="Eh bien, zut alors ! üôà On dirait que je suis encore dans ma phase d'apprentissage et que je n'ai pas encore tout √† fait ma√Ætris√© cette question. Mais h√©, je suis un petit chatbot d√©termin√©, et je promets de faire de mon mieux pour en apprendre davantage bient√¥t ! ü§ñüí™ Pendant que je m'impr√®gne de connaissances, n'h√©sitez pas √† explorer les autres questions r√©pertori√©es sur le c√¥t√© gauche de ma bo√Æte de discussion ou √† taper une requ√™te similaire dans la bo√Æte de dialogue. Je suis l√† pour discuter et apprendre, donc n'h√©sitez pas √† poser vos questions ! üåü",
    )


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ChatAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name="ClientConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "to_address",
                    models.EmailField(
                        max_length=254,
                        validators=[
                            django.core.validators.EmailValidator(
                                message="Please enter a valid email address."
                            )
                        ],
                    ),
                ),
                ("is_message_selected", models.BooleanField(default=True)),
                ("is_meeting_selected", models.BooleanField(default=False)),
                ("is_query_selected", models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name="CustomQueryConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "to_address",
                    models.EmailField(
                        max_length=254,
                        validators=[
                            django.core.validators.EmailValidator(
                                message="Please enter a valid email address."
                            )
                        ],
                    ),
                ),
                ("name", models.CharField(max_length=20)),
                ("number", models.CharField(max_length=15)),
                (
                    "email",
                    models.EmailField(
                        max_length=254,
                        validators=[
                            django.core.validators.EmailValidator(
                                message="Please enter a valid email address."
                            )
                        ],
                    ),
                ),
                ("company", models.CharField(max_length=40)),
                ("content", models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name="CustomTrain",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model_name", models.CharField(max_length=20)),
                ("date", models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name="IntentConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("intent_name", models.CharField(db_index=True, max_length=100)),
                ("response", models.CharField(max_length=1000)),
                ("is_product", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="LeadConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "to_address",
                    models.EmailField(
                        max_length=254,
                        validators=[
                            django.core.validators.EmailValidator(
                                message="Please enter a valid email address."
                            )
                        ],
                    ),
                ),
                ("name", models.CharField(max_length=20)),
                ("number", models.CharField(max_length=15)),
                (
                    "email",
                    models.EmailField(
                        max_length=254,
                        validators=[
                            django.core.validators.EmailValidator(
                                message="Please enter a valid email address."
                            )
                        ],
                    ),
                ),
                ("company", models.CharField(max_length=40)),
                ("file_id", models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name="MeetingConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=20)),
                ("number", models.CharField(max_length=15)),
                (
                    "email",
                    models.EmailField(
                        max_length=254,
                        validators=[
                            django.core.validators.EmailValidator(
                                message="Please enter a valid email address."
                            )
                        ],
                    ),
                ),
                ("company", models.CharField(max_length=20)),
                ("datetime", models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name="ProductConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("product_name", models.CharField(max_length=40)),
                ("info", models.TextField()),
                ("file", models.TextField()),
                ("rank", models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="SessionList",
            fields=[
                (
                    "session_id",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("datetime", models.DateTimeField()),
                ("num_messages", models.IntegerField()),
                ("ip_address", models.CharField(max_length=15)),
                ("device", models.CharField(max_length=10)),
                ("browser", models.CharField(max_length=10)),
                ("country", models.CharField(max_length=20)),
                ("latitude", models.CharField(max_length=10)),
                ("longitude", models.CharField(max_length=10)),
                ("os", models.CharField(max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name="StateConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("session_id", models.CharField(max_length=40)),
                ("state", models.CharField(max_length=15, null=True)),
                ("name", models.CharField(max_length=20, null=True)),
                ("email", models.CharField(max_length=30, null=True)),
                ("company", models.CharField(max_length=20, null=True)),
                ("number", models.CharField(max_length=15, null=True)),
                ("lead_state", models.BooleanField(default=False, null=True)),
                ("meeting_state", models.BooleanField(default=False, null=True)),
                ("bug", models.BooleanField(default=False, null=True)),
                ("msg", models.CharField(max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Ticket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ticket_number", models.CharField(max_length=40)),
                ("subject", models.CharField(max_length=40)),
                ("issue", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="SessionConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("intent", models.CharField(max_length=20)),
                ("query", models.CharField(max_length=100)),
                ("answer", models.CharField(max_length=500)),
                ("confidence", models.CharField(max_length=15)),
                ("datetime", models.DateTimeField()),
                (
                    "session_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dashboard.sessionlist",
                    ),
                ),
            ],
        ),
        migrations.RunPython(seed_data),
    ]
